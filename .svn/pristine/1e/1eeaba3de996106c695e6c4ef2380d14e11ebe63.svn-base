package kr.or.ddit.view.cart2;

import java.io.IOException;
import java.net.URL;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

import com.jfoenix.controls.JFXButton;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.stage.Stage;
import javafx.util.Callback;
import kr.or.ddit.clientMain.LoginSession;
import kr.or.ddit.service.board.BoardService;
import kr.or.ddit.service.book.BookService;
import kr.or.ddit.service.cart2.Cart2Service;
import kr.or.ddit.vo.BoardVO;
import kr.or.ddit.vo.BookVO;
import kr.or.ddit.vo.ComVO;
import kr.or.ddit.vo.MemberVO;
import kr.or.ddit.vo.ProdVO;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.text.Text;
import javafx.scene.text.TextFlow;
import javafx.scene.control.TableColumn;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.Pagination;
import javafx.scene.control.Label;


public class CartController implements Initializable {

	@FXML private TableView<ProdVO> cart_table;
	
	@FXML private TableColumn<ProdVO,Integer> prod_id;
	@FXML private TableColumn<ProdVO,String> prod_name;
	@FXML private TableColumn<ProdVO,String> prod_info;
	@FXML private TableColumn<ProdVO,Integer> prod_cost;

	@FXML 
	private Pagination pagination;
	
	private int from, to, itemsForPage;
	
	private ObservableList<ProdVO> allTableData, currentPageData;
	
	private ProdVO vo = new ProdVO();
	public static ProdVO prodvo;
	
	private Registry reg;
	private Cart2Service bds;
	
	private ArrayList<ProdVO> list = new ArrayList<>();
	
	@FXML TableColumn bd_writer;
	
	@FXML private JFXButton delete_btn;

	@FXML Label count_label;

	@FXML Button ct_order;
	
	public void initialize(URL location, ResourceBundle resources) {
		
		//rmi연결
		try {	
			reg = LocateRegistry.getRegistry("localhost", 8888);
			bds = (Cart2Service) reg.lookup("cart2Service");
			System.out.println("연결 성공");
			
		}catch (RemoteException e) {
			System.out.println("실패 ㅋ");
			e.printStackTrace();
		}catch(NotBoundException e) {
			e.printStackTrace();
		}
				
		//테이블 가져오기
		prod_id.setCellValueFactory(new PropertyValueFactory<>("prod_id"));
		prod_name.setCellValueFactory(new PropertyValueFactory<>("prod_name"));
		prod_info.setCellValueFactory(new PropertyValueFactory<>("prod_info"));
		prod_cost.setCellValueFactory(new PropertyValueFactory<>("prod_cost"));
   	 	
   	 	
		allTableData = FXCollections.observableArrayList(list);
		

		try {
			list = (ArrayList<ProdVO>) bds.getAllList();
		} catch (RemoteException e2) {
			e2.printStackTrace();
		}
		
		
		allTableData.setAll(list);
		allTableData.add(vo);
		
		cart_table.setItems(allTableData);
   	 	
   	 	System.out.println("테이블 테스트");
   	 	
   	
   		
   	 	try {
   	 		list = (ArrayList<ProdVO>) bds.getAllList();
   	 	}catch(RemoteException e) {
   	 		e.printStackTrace();
   	 	}
   	 	
   	 	allTableData.setAll(list);
   	 	
   	 	cart_table.setItems(allTableData);
   	 	
   	 	System.out.println("selectMyBook테스트");
   	 	
   	 	itemsForPage = 10; // 한페이지에 보여줄 항목수 설정
   	 	int totPageCount = allTableData.size()%itemsForPage == 0 ? 
   			 allTableData.size()/itemsForPage : allTableData.size()/itemsForPage + 1;
   	 
   			pagination.setPageCount(totPageCount); //전체페이지 수 설정
			
			pagination.setPageFactory(new Callback<Integer, Node>(){

				@Override
				public Node call(Integer pageIndex) {
					from = pageIndex * itemsForPage;
					to = from + itemsForPage -1;
					cart_table.setItems(getTableViewData(from, to));
					return cart_table;
				}

				private ObservableList<ProdVO> getTableViewData(int from, int to) {
					currentPageData = FXCollections.observableArrayList(); //초기화
					int totSize = allTableData.size();
						
					for(int i=from; i<=to && i<totSize; i++) {
						currentPageData.add(allTableData.get(i));
					}
					return currentPageData;
					
				}
				
			});
			
			//리스트 선택하여 누르면 접속
			cart_table.setOnMouseClicked(e->{
				
				ProdVO bt = cart_table.getSelectionModel().getSelectedItem();

				Parent change = null;
				try {
					
					change = FXMLLoader.load(getClass().getResource("/kr/or/ddit/view/cart2/cart_read.fxml"));
					Scene scene = new Scene(change);
					Stage primaryStage = (Stage)cart_table.getScene().getWindow();
					primaryStage.setScene(scene);
				} catch (IOException e1) {
					e1.printStackTrace();
				}
				
				Text read_title = (Text) change.lookup("#read_title");  	//제목
				Text read_writer = (Text) change.lookup("#read_writer");	//작성자
				Text read_date = (Text) change.lookup("#read_date");		//이름이 저렇다고 혼동x 가격
				Text read_content = (Text) change.lookup("#read_content");	//내용
					
			
				//게시글 내용 변경 하기
				read_title.setText(bt.getProd_name());
				read_writer.setText(String.valueOf(bt.getProd_id()));
				read_date.setText(String.valueOf(bt.getProd_cost()));
				read_content.setText(bt.getProd_info());

			});
			
			Parent change = null;
			JFXButton list_btn = (JFXButton) change.lookup("#list_btn"); //게시글 목록 버튼
			list_btn.setOnAction(e1->{
				Parent change2 = null;
				try {
					change2 = FXMLLoader.load(getClass().getResource("/kr/or/ddit/view/startMain/main_topandbottom.fxml"));
					Scene scene = new Scene(change2);
					Stage primaryStage = (Stage)list_btn.getScene().getWindow();
					primaryStage.setScene(scene);
					
                    LoginSession.startMain.NomarBoardLink();
			
				}catch (Exception e2) {
					e2.printStackTrace();
				}
			});		
			
	

	
}
}
