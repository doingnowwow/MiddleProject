package kr.or.ddit.view.mypage2.human.center.myact;

import java.net.URL;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Pagination;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.util.Callback;
import javafx.util.StringConverter;
import kr.or.ddit.clientMain.LoginSession;
import kr.or.ddit.service.book.BookService;
import kr.or.ddit.service.dogBoard.DogBoardService;
import kr.or.ddit.service.dogsale.DogSaleService;
import kr.or.ddit.service.horeview.HoReviewService;
import kr.or.ddit.vo.DogBoardVO;
import kr.or.ddit.vo.HotelReviewVO;
import kr.or.ddit.vo.MemberVO;
import javafx.scene.layout.AnchorPane;


// 앙 도영이가 작업중이에요~ >< 만지지 마슈 
public class mypage_human_center_myact_controller implements Initializable{
	
	@FXML DatePicker forwardDate;
	@FXML DatePicker backwardDate;
	@FXML Button dateSearchBtn;
	@FXML TextField detailSearchTF;
	@FXML Button detailSearchBtn;
	@FXML TableView<HotelReviewVO> hotelCommentTable;
	@FXML TableColumn<HotelReviewVO, String> dateCol;
	@FXML TableColumn<HotelReviewVO, String> titleCol;
	@FXML TableColumn<HotelReviewVO, String> contentCol;
	@FXML TableColumn<HotelReviewVO, String> h_nameCol;
	@FXML TableColumn<HotelReviewVO, Integer> starCol;
	@FXML Pagination pnation;
	
	// ---- 분양 리뷰 테이블 ----
	@FXML AnchorPane salePane;
	@FXML TextField detailSearchTF2;
	@FXML Button detailSearchBtn2;
	@FXML TableView<DogBoardVO> hotelCommentTable2;
	@FXML TableColumn<DogBoardVO, Integer> No_sale;
	@FXML TableColumn<DogBoardVO, Integer>  dateCol2;
	@FXML TableColumn<DogBoardVO, Integer>  titleCol2;
	@FXML TableColumn<DogBoardVO, Integer>  contentCol2;
	@FXML TableColumn<DogBoardVO, Integer>  h_nameCol2;
	@FXML TableColumn<DogBoardVO, Integer>  starCol2;
	@FXML Pagination pnation2;
	@FXML DatePicker forwardDate2;
	@FXML DatePicker backwardDate2;
	@FXML Button dateSearchBtn2;
	

	
	// 호텔 리뷰 //분양 리뷰
	private Registry reg;
	private Registry reg2;
	
	private HoReviewService hrs;
	private DogBoardService dbs;
	
	// 페이지네이션
	private int from, to, itemsForPage;
	private ObservableList<HotelReviewVO> allTableData, currentPageData;
	
	private int from2, to2, itemsForPage2;
	private ObservableList<DogBoardVO> allTableData2, currentPageData2;
	
	// 글 전체 정보를 담는 리스트
	public static ArrayList<HotelReviewVO> ho_list = new ArrayList<>();
	private ArrayList<HotelReviewVO> check_list = new ArrayList<>();
	
	public static ArrayList<DogBoardVO> ds_list = new ArrayList<>();
	private ArrayList<DogBoardVO> chk_list = new ArrayList<>();
	
	// 로그인 사용자 정보 저장
	MemberVO mv = LoginSession.session;
	HotelReviewVO hv = new HotelReviewVO();
	int user = 0;
	
	// 선택한 글번호 저장하는 변수
	String click_save = null;

	int totPageCnt = 0;
	int totPageCnt2 = 0;
	
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		
		try {
			reg = LocateRegistry.getRegistry("localhost", 8888);
			hrs = (HoReviewService) reg.lookup("hotelReview");
		}catch (RemoteException e) {
			e.printStackTrace();
		}catch (NotBoundException e) {
			e.printStackTrace();
		}
		
		
		// 내가 쓴 리뷰 출력~~~
		try {
			user = mv.getMem_no();
			hv.setMem_no(user);
			
			ho_list = (ArrayList<HotelReviewVO>) hrs.selectRewview(hv);
		}catch (RemoteException e) {
			e.printStackTrace();
		}
		
		dateCol.setCellValueFactory(new PropertyValueFactory<>("hore_date"));
		titleCol.setCellValueFactory(new PropertyValueFactory<>("hore_title"));
		contentCol.setCellValueFactory(new PropertyValueFactory<>("hore_content"));
		h_nameCol.setCellValueFactory(new PropertyValueFactory<>("hotel_name"));
		starCol.setCellValueFactory(new PropertyValueFactory<>("hore_star"));
		
		
		allTableData = FXCollections.observableArrayList();
		
		allTableData.setAll(ho_list);
		
		hotelCommentTable.setItems(allTableData);
		
		itemsForPage = 20;
		
		totPageCnt = allTableData.size()%itemsForPage == 0
				? allTableData.size()/itemsForPage
				: allTableData.size()/itemsForPage + 1;
				
		pnation.setPageCount(totPageCnt);
		pnation.setPageFactory(this::createPage);
		
		
		dateSearchBtn.setOnAction(e -> {
			LocalDate pickForward = forwardDate.getValue();
			LocalDate pickBackward = backwardDate.getValue();
			
			String fDate = formatChange(pickForward);
			String bDate = formatChange(pickBackward);
			
			hv.setHopick_date1(fDate);
			hv.setHopick_date2(bDate);
			
			try {
				
				user = mv.getMem_no();
				hv.setMem_no(user);
				
				ho_list = (ArrayList<HotelReviewVO>) hrs.selectMyReviewDate(hv);
			}catch (RemoteException e1) {
				e1.printStackTrace();
			}
			
			dateCol.setCellValueFactory(new PropertyValueFactory<>("hore_date"));
			titleCol.setCellValueFactory(new PropertyValueFactory<>("hore_title"));
			contentCol.setCellValueFactory(new PropertyValueFactory<>("hore_content"));
			h_nameCol.setCellValueFactory(new PropertyValueFactory<>("hotel_name"));
			starCol.setCellValueFactory(new PropertyValueFactory<>("hore_star"));
			
			allTableData = FXCollections.observableArrayList();
			
			allTableData.setAll(ho_list);
			
			hotelCommentTable.setItems(allTableData);
			
			itemsForPage = 20;
			
			totPageCnt = allTableData.size()%itemsForPage == 0
					? allTableData.size()/itemsForPage
							: allTableData.size()/itemsForPage + 1;
					
					pnation.setPageCount(totPageCnt);
					pnation.setPageFactory(this::createPage);
					
			
		});
		
		detailSearchBtn.setOnAction(e -> {
			try {
				
				String textA = detailSearchTF.getText();
				
//				user = mv.getMem_no();
				hv.setMem_no(15);
				
				hv.setHore_title(textA);
				hv.setHore_content(textA);
				
				ho_list = (ArrayList<HotelReviewVO>) hrs.selectMyReviewText(hv);
			}catch (RemoteException e1) {
				e1.printStackTrace();
			}
			dateCol.setCellValueFactory(new PropertyValueFactory<>("hore_date"));
			titleCol.setCellValueFactory(new PropertyValueFactory<>("hore_title"));
			contentCol.setCellValueFactory(new PropertyValueFactory<>("hore_content"));
			h_nameCol.setCellValueFactory(new PropertyValueFactory<>("hotel_name"));
			starCol.setCellValueFactory(new PropertyValueFactory<>("hore_star"));
			
			allTableData = FXCollections.observableArrayList();
			
			allTableData.setAll(ho_list);
			
			hotelCommentTable.setItems(allTableData);
			
			
		});
		
	
// 분양테이블 시작
	
	DogBoardVO vo = new DogBoardVO();
   
	try {   
       reg2 = LocateRegistry.getRegistry("localhost", 8888);
       dbs = (DogBoardService) reg2.lookup("dogBoardService");
       selectList(vo);
     }catch (RemoteException e) {
       System.out.println("실패 ㅋ");
       e.printStackTrace();
    }catch(NotBoundException e) {
       e.printStackTrace();
	    }
	}
	
	//-----------
    
    public void selectList(DogBoardVO vo) {
		try {
			ds_list = (ArrayList<DogBoardVO>) dbs.getAllDogBoard();
		} catch (RemoteException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		allTableData2 = FXCollections.observableArrayList(ds_list);
	    
	    allTableData2.setAll(ds_list);
//	    allTableData.add(vo);
	    
	    System.out.println("list2 = " + ds_list.size());
	    System.out.println("allTableData2 = " + allTableData2.size());
	    hotelCommentTable2.setItems(allTableData2);
	    
	    No_sale.setCellValueFactory(new PropertyValueFactory<>("dogboard_no"));
		dateCol2.setCellValueFactory(new PropertyValueFactory<>("dogboard_date"));
		titleCol2.setCellValueFactory(new PropertyValueFactory<>("dogboard_title"));
		contentCol2.setCellValueFactory(new PropertyValueFactory<>("dogboard_content"));
		h_nameCol2.setCellValueFactory(new PropertyValueFactory<>("com_no"));
		
	  
		itemsForPage = 10; //한페이지에 보여줄 항목 수 설정
		totPageCnt2 = allTableData.size()%itemsForPage == 0?
	    allTableData.size() / itemsForPage :
	    allTableData.size()/itemsForPage+1;
	    
	    pnation2.setPageCount(totPageCnt2); //전체페이지 수 설정
		
		
	    pnation2.setPageFactory(new Callback<Integer, Node>(){
	      	
	    @Override
	    public Node call(Integer pageIndex) {
	       from2 = pageIndex * itemsForPage2;
	       to2 = from2 + itemsForPage2 -1;
	       hotelCommentTable2.setItems(getTableViewData(from2, to2));
	       return hotelCommentTable2;
	    }
		     
	    private ObservableList<DogBoardVO> getTableViewData(int from, int to) {
		currentPageData2 = FXCollections.observableArrayList(); //초기화
		    int totSize = allTableData2.size();
		       
		    for(int i=from; i<=to && i<totSize; i++) {
		       currentPageData2.add(allTableData2.get(i));
		    }
		    return currentPageData2;
	}
	  });
	}
	
	
	
	

	private String formatChange(LocalDate ld) {
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd");
		String rtn = ld.format(dtf);
		return rtn;
	}

	// 페이지네이션용 메서드
	private Node createPage(int pageIndex) {
		from = pageIndex * itemsForPage;
		to = from + itemsForPage -1 ;
		hotelCommentTable.setItems(getTableViewData(from, to));
		
		return hotelCommentTable;
	}
	
	// 페이지네이션용 메서드
	private ObservableList<HotelReviewVO> getTableViewData(int from, int to) {
		currentPageData = FXCollections.observableArrayList();
		int totSize = allTableData.size();
		for( int i = from; i <= to && i < totSize; i++) {
			currentPageData.add(allTableData.get(i));
		}
		return currentPageData;
	}
	
	


}



















