package kr.or.ddit.view.mypage2.human.center.ranking;

import java.net.URL;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.ArrayList;
import java.util.ResourceBundle;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.control.Label;
import javafx.scene.control.Pagination;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.text.Text;
import javafx.util.Callback;
import kr.or.ddit.service.Human_Mypage_Ranking.Human_MypageRankService;
import kr.or.ddit.vo.PointVO;

// 승재 작업 완료
public class mypage_human_center_ranking_controller implements Initializable{

	@FXML ImageView img_rank;
	@FXML Label goalId;
	@FXML Text goalRanktext;
	@FXML TableView<PointVO> mileage;
	@FXML Pagination mileage_page;
	@FXML Text rankingRtandard;
	@FXML Text goalMission;
	@FXML TableColumn<PointVO, String> point_date;
	@FXML TableColumn<PointVO, String> save_contents;
	@FXML TableColumn<PointVO, Integer> save_point;
	@FXML TableColumn<PointVO, Integer> use_point;
	@FXML TableColumn<PointVO, Integer> sumPoint;
	private Registry reg;
	private Human_MypageRankService cs;
	private ObservableList<PointVO> AllPointTableData, currentPageData;
	
	int from, to, itemsForPage;
	PointVO memNo_rank = null;
	
	
	
	


	@SuppressWarnings("null")
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		
		// 로그인 membervo 가져오기 (상단부에 필요)
		//MemberVO LoginInfo = LoginSession.session;
		// pointvo가져오기 (테이블에 필요)
		
//		int mem_no = LoginInfo.getMem_no();
//		String joinId = LoginInfo.getMem_id().trim();
//		String rank = LoginInfo.getMem_level().trim();
//		int rankpoint = LoginInfo.getMem_point();
		
		//로그인된 사용자 정보 가져오기(가라)
		int mem_no = 4;
		String joinId = "hit";
		String rank = "골드";
		int rankpoint = 1400;
		

		//담을 객체 선언
		PointVO memNo_rank = new PointVO();
		ArrayList<PointVO> rankList = new ArrayList<>();
		memNo_rank.setMem_no(mem_no);
		
//		//DB연결

		try {
			reg = LocateRegistry.getRegistry("localhost", 8888);
			cs = (Human_MypageRankService) reg.lookup("myRankPoint");
			// 이제부터는 불러온 객체의 메서드를 호출해서 사용할 수 있다.
			//사용자 검색을 통해 나온 모든 정보 저장(pointVO)
			rankList = (ArrayList<PointVO>) cs.getMemberPoint(memNo_rank);
		} catch (RemoteException e) {
			e.printStackTrace();
		} catch (NotBoundException e) {
			e.printStackTrace();
		}

		
		point_date.setCellValueFactory(new PropertyValueFactory<>("gen_date"));
		save_contents.setCellValueFactory(new PropertyValueFactory<>("point_contents"));
		save_point.setCellValueFactory(new PropertyValueFactory<>("point_money"));
		use_point.setCellValueFactory(new PropertyValueFactory<>("point_use"));
		sumPoint.setCellValueFactory(new PropertyValueFactory<>("point_mypoint"));
		
		

		
		
		//전체 테이블 데이터 생성
		AllPointTableData = FXCollections.observableArrayList(rankList);
		
		
		itemsForPage = 15; // 한페이지 보여줄 항목 수 설정
		int totPageCount = AllPointTableData.size()%itemsForPage == 0 ? AllPointTableData.size()/itemsForPage : AllPointTableData.size()/itemsForPage + 1;
		mileage_page.setPageCount(totPageCount); // 전체 페이지 수 설정
		
		
		mileage_page.setPageFactory(new Callback<Integer, Node>() {
			@Override
			public Node call(Integer pageIndex) {
				from = pageIndex * itemsForPage;
				to = from + itemsForPage - 1;
				mileage.setItems(getTableViewData(from, to));
				
				return mileage;
			}
		});
		
		
		

		
		
		
		// 기준 포인트 설정부분
		int goldpoint = 1500;
		int silverpoint = 500;
		int bronzepoint = 150;
		
		// 목표포인트까지 남은 정도
		int goalpoint;
		
		//imageview 랭킹표시 -- 
		Image rankimg;
		
		if(rank == "골드") {
			rankimg = new Image(getClass().getResourceAsStream("/rankimg/gold_190x243.gif"));
			
			goalId.setText(joinId +"님은 ");
			goalRanktext.setText("현재 최고 등급인 골드입니다.");
		}else if(rank == "실버") {
			rankimg = new Image(getClass().getResourceAsStream("/rankimg/gold_190x243.gif"));
			
			goalId.setText(joinId +"님의 ");
			goalRanktext.setText("목표 구매 등급은 '골드'입니다.");

			goalpoint = goldpoint - rankpoint;
			goalMission.setText(
				"앞으로\n"
				+ goalpoint + "\n"
				+ "가 남았습니다.");
		}else {
			rankimg = new Image(getClass().getResourceAsStream("/rankimg/bronze_190x243.gif"));
			
			goalId.setText(joinId +"님의 ");
			goalRanktext.setText("목표 구매 등급은 '실버' 입니다.");
			
			goalpoint = silverpoint - rankpoint; 
		}
		
		//이미지 적용
		img_rank.setImage(rankimg);
		
		// 구매 등급 기준
		rankingRtandard.setText(
			"골드 : " + goldpoint + "이상\n" +
			"실버 : " + bronzepoint + "이상 ~ " + silverpoint + "미만\n" +
			"브론즈 : " + bronzepoint + "이하");
		
	}
	
	/**
	 * TableView에 채워줄 데이터를 가져오는 함수
	 * @param from
	 * @param to
	 * @return
	 */
	protected ObservableList<PointVO> getTableViewData(int from, int to) {
		currentPageData = FXCollections.observableArrayList(); // 현재페이지 데이터 초기화
		int totSize = AllPointTableData.size();
		for(int i = from; i <= to && i <totSize; i++){
			currentPageData.add(AllPointTableData.get(i));
		}
		
		return currentPageData;
	}



}
