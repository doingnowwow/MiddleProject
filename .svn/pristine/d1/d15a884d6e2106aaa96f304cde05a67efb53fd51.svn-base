package kr.or.ddit.view.cart2;

import java.io.IOException;
import java.net.URL;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

import com.jfoenix.controls.JFXButton;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.stage.Stage;
import javafx.util.Callback;
import kr.or.ddit.clientMain.LoginSession;
import kr.or.ddit.service.board.BoardService;
import kr.or.ddit.service.book.BookService;
import kr.or.ddit.service.cart2.Cart2Service;
import kr.or.ddit.vo.BoardVO;
import kr.or.ddit.vo.BookVO;
import kr.or.ddit.vo.ComVO;
import kr.or.ddit.vo.MemberVO;
import kr.or.ddit.vo.ProdVO;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.text.Text;
import javafx.scene.text.TextFlow;
import javafx.scene.control.TableColumn;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.Pagination;
import javafx.scene.control.Label;


public class CartController implements Initializable {

	@FXML private TableView<ProdVO> cart_table;
	
	@FXML private TableColumn<ProdVO,Integer> prod_id;
	@FXML private TableColumn<ProdVO,String> prod_name;
	@FXML private TableColumn<ProdVO,String> prod_info;
	@FXML private TableColumn<ProdVO,Integer> prod_cost;

	@FXML 
	private Pagination pagination;
	
	private int from, to, itemsForPage;
	
	private ObservableList<ProdVO> allTableData, currentPageData;
	
	private ProdVO vo = new ProdVO();
	public static ProdVO prodvo;
	
	private Registry reg;
	private Cart2Service bds;
	
	private ArrayList<ProdVO> list = new ArrayList<>();
	
	@FXML TableColumn bd_writer;
	
	@FXML private JFXButton delete_btn;

	@FXML Label count_label;

	@FXML Button ct_order;
	
	
	
	//로그인 유저 정보 받기
		ProdVO mv = LoginSession.prodsssion;
		int user = mv.getProd_id();
		
	// VO 객체 생성
		ProdVO bv = new ProdVO();
	
	
	public void initialize(URL location, ResourceBundle resources) {
		
		//rmi연결
		try {	
			reg = LocateRegistry.getRegistry("localhost", 8888);
			bds = (Cart2Service) reg.lookup("Cart2Service");
			System.out.println("연결 성공");
			
		}catch (RemoteException e) {
			System.out.println("실패 ㅋ");
			e.printStackTrace();
		}catch(NotBoundException e) {
			e.printStackTrace();
		}
				
		//테이블 가져오기
		prod_id.setCellValueFactory(new PropertyValueFactory<>("prod_id"));
		prod_name.setCellValueFactory(new PropertyValueFactory<>("prod_name"));
		prod_info.setCellValueFactory(new PropertyValueFactory<>("prod_info"));
		prod_cost.setCellValueFactory(new PropertyValueFactory<>("prod_cost"));
   	 	
   	 	
		allTableData = FXCollections.observableArrayList(list);
		

		try {
			list = (ArrayList<ProdVO>) bds.getAllList();
		} catch (RemoteException e2) {
			e2.printStackTrace();
		}
		
		
		allTableData.setAll(list);
		allTableData.add(vo);
		
		cart_table.setItems(allTableData);
   	 	
   	 	System.out.println("테이블 테스트");
   	 	
   		// 로그인 유저 정보 셋팅
   	 	user = mv.getProd_id();
   	 	bv.setProd_id(user);
   		System.out.println(bv);
   	 	
   	 	try {
   	 		list = (ArrayList<ProdVO>) bds.getAllList();
   	 	}catch(RemoteException e) {
   	 		e.printStackTrace();
   	 	}
   	 	
   	 	allTableData.setAll(list);
   	 	
   	 	cart_table.setItems(allTableData);
   	 	
   	 	System.out.println("selectMyBook테스트");
   	 	
   	 	itemsForPage = 10; // 한페이지에 보여줄 항목수 설정
   	 	int totPageCount = allTableData.size()%itemsForPage == 0 ? 
   			 allTableData.size()/itemsForPage : allTableData.size()/itemsForPage + 1;
   	 
   			pagination.setPageCount(totPageCount); //전체페이지 수 설정
			
			pagination.setPageFactory(new Callback<Integer, Node>(){

				@Override
				public Node call(Integer pageIndex) {
					from = pageIndex * itemsForPage;
					to = from + itemsForPage -1;
					cart_table.setItems(getTableViewData(from, to));
					return cart_table;
				}

				private ObservableList<ProdVO> getTableViewData(int from, int to) {
					currentPageData = FXCollections.observableArrayList(); //초기화
					int totSize = allTableData.size();
						
					for(int i=from; i<=to && i<totSize; i++) {
						currentPageData.add(allTableData.get(i));
					}
					return currentPageData;
					
				}
				
			});
			 Parent change = null;
			 Button delete_btn = (Button) change.lookup("#delete_btn"); //게시글 목록 버튼
	         delete_btn.setOnAction(e2->{
	            int sel_no = cart_table.getSelectionModel().getSelectedIndex();
	              
	             int sel_ind = (pagination.getCurrentPageIndex()) * (itemsForPage)
	                  + cart_table.getSelectionModel().getSelectedIndex();
	            int sel_re_no = list.get(sel_ind).getProd_id();
	            
	            ProdVO bt = cart_table.getSelectionModel().getSelectedItem();
	            
	            int user = bt.getProd_id();
	            vo.setProd_id(user);
	            vo.setProd_name(sel_re_no);
	            
	            try {
	               int del_re = bds.deleteCart(vo);
	               
	               
	               if(del_re > 0) {
	                   infoMsg("성공!", "게시글이 삭제되었습니다!");
	                   Parent change2 = null;
	                   try {
	                      change2 = FXMLLoader.load(getClass().getResource("community_Home.fxml"));
	                      Scene scene = new Scene(change2);
	                      Stage primaryStage = (Stage)delete_btn.getScene().getWindow();
	                      primaryStage.setScene(scene);
	                
	                   }catch (Exception e1) {
	                      e1.printStackTrace();
	                   }
	                }
	              
	                 if(del_re < 0) {
	                    System.out.println("삭제 안됨..");
	                    errMsg("실패!", "삭제가 안된 원인을 찾아보세요.."); 
	                 }
	            } catch (RemoteException e1) {
	               e1.printStackTrace();
	            }
	         });
			
	       //확인 알림메시지
				private void infoMsg(String headerText, String msg) {
					Alert infoAlert = new Alert(AlertType.INFORMATION);
					infoAlert.setTitle("알림");
					infoAlert.setHeaderText(headerText);
					infoAlert.setContentText(msg);
					infoAlert.showAndWait();
				}
				
				//에러 알림메시지
				private void errMsg(String headerText, String msg) {
					Alert errAlert = new Alert(AlertType.ERROR);
					errAlert.setTitle("오류");
					errAlert.setHeaderText(headerText);
					errAlert.setContentText(msg);
					errAlert.showAndWait();
				}
	
	}
	
}
