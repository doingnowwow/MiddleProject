package kr.or.ddit.view.main.hotel.center.hoteldetailpage;

import java.net.URL;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.ResourceBundle;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.Pagination;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import kr.or.ddit.clientMain.LoginSession;
import kr.or.ddit.service.hotel.HotelService;
import kr.or.ddit.view.main.hotel.main.main_hotel_controller;
import kr.or.ddit.vo.HotelReviewVO;
import kr.or.ddit.vo.HotelVO;

public class main_hotel_detailpage_controller implements Initializable{
	
	@FXML Label ho_telLabel;
	@FXML Label ho_addrLabel;
	@FXML Label ho_nameLabel;
	@FXML Label moneyLabel;
	@FXML ImageView hotel_img;
	@FXML TextArea hotelInfoTA;
	@FXML TextArea roomInfoTA;
	
	@FXML DatePicker bookst_date;
	@FXML DatePicker bookend_date;
	@FXML Button book_btn;
	@FXML Button dateConfirmBtn;
	
	@FXML TableView<HotelReviewVO> review_tb;
	@FXML TableColumn<HotelReviewVO, String> contentCol;
	@FXML TableColumn<HotelReviewVO, String> writerCol;
	@FXML TableColumn<HotelReviewVO, String> writeDateCol;
	@FXML TextField reviewTF;
	@FXML Button reviewBtn;
	@FXML Pagination pnation;
	
	main_hotel_controller hotelselect;
	
	public static ArrayList<HotelReviewVO> hrlist = new ArrayList<>();
	private ObservableList<HotelReviewVO> allTableData;
	private HotelReviewVO rvo = new HotelReviewVO();

	
	private Registry reg;
	private HotelService hs;
	
	// 호텔 정보를 담는 리스트
	private static List<HotelVO> hotel_list  = new ArrayList<>();
	
	// 선택한 호텔 정보 저장
	HotelVO hocho;
	HotelVO hv = new HotelVO();
	int hoNum = 0;

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// 서버 연결
		try {
			reg = LocateRegistry.getRegistry("localhost", 8888);
			hs = (HotelService) reg.lookup("hotelService");
		}catch (RemoteException e) {
			e.printStackTrace();
		}catch (NotBoundException e) {
			e.printStackTrace();
		}
		hocho = LoginSession.hosession;
		// 가져온 호텔 정보를 출력
		try {
			hoNum = hocho.getHotel_no();
//			hv.setHotel_no(hoNum);
			
			hotel_list = hs.getSelectedHotel(hocho);
		}catch(RemoteException e) {
			e.printStackTrace();
		}
		
		String hoName = hotel_list.get(0).getHotel_name();
		ho_nameLabel.setText(hoName);
		
		String ho_Tel = hotel_list.get(0).getHotel_tel();
		ho_telLabel.setText(ho_Tel);
		
		String ho_addr1 = hotel_list.get(0).getHotel_addr1();
		String ho_addr2 = hotel_list.get(0).getHotel_addr2();
		ho_addrLabel.setText(ho_addr1 + " / " + ho_addr2);
		
		String hoInfo = hotel_list.get(0).getHotel_intro();
		hotelInfoTA.setText(hoInfo);
		
		String hoimage = hotel_list.get(0).getImg();
		hotel_img.setImage(new Image(hoimage));
		
		dateConfirmBtn.setOnAction(e -> {
			LocalDate bs = bookst_date.getValue();
			LocalDate be = bookend_date.getValue();

			Period getMinus = Period.between(bs, be);
			
			int cnt = getMinus.getDays();
			
			int cost = hotel_list.get(0).getHotel_cost();
			
			int sum = cnt * cost;
			
			
			
			moneyLabel.setText(sum + "");
			
		});
		
		
		
		allTableData = FXCollections.observableArrayList(hrlist);
		
		allTableData.setAll(hrlist);
		allTableData.add(rvo);
		
		review_tb.setItems(allTableData);
		
		contentCol.setCellValueFactory(new PropertyValueFactory<>("hore_content"));
		writerCol.setCellValueFactory(new PropertyValueFactory<>("hore_writer"));
		writeDateCol.setCellValueFactory(new PropertyValueFactory<>("hore_date"));
		
		String view_writer = writerCol.getText();
		String view_content = reviewTF.getText();
		
		Date date = new Date();
		SimpleDateFormat format1 = new SimpleDateFormat ( "yyyy-MM-dd
		
		
		  = writeDateCol.getText();
		
		
				

		String nowId = LoginSession.session.getMem_id();
		
			 
	}

	// datepicker 포맷바꿔주기
	public String formatChange(LocalDate ld) {
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd");
    	String rtn = ld.format(dtf);
    	return rtn;
	}




}
